import org.gradle.internal.os.OperatingSystem;

apply plugin: 'com.android.model.application'

final APP_ABIS = [
        "armeabi-v7a",
        "x86",
        //"arm64-v8a",
]
final BOOST_SHARED_LIBS = [
        "boost_serialization",
        "boost_system",
        "boost_filesystem",
        //"boost_log_setup",
        //"boost_log",
        //"boost_thread",
]

model {
    android {
        compileSdkVersion = 23
        buildToolsVersion = "23.0.2"

        ndk {
            // toolchain  = "clang"
            toolchain = "gcc"
            toolchainVersion = "5"
            platformVersion = 16
            moduleName = "allivault-api"
            stl        = 'gnustl_shared' // recommending gnustl_static/gnustl_shared for android
            cppFlags.addAll([
                    //"-includeprebuilt/armeabi/include/android_common.h",
                    "-std=c++11",
                    "-fexceptions",
                    "-frtti",
                    "-Wunused-function",
                    "-DGIT_SSH",
                    "-DSQLITE_HAS_CODEC",
                    "-D_GLIBCXX_USE_CXX11_ABI=0",
                    "-DALLI_HEADERS_ONLY",
            ])
            cppFlags.add("-I" + getBoostIncDir())
            ldLibs.addAll BOOST_SHARED_LIBS
            ldLibs.addAll(['android', 'log', 'atomic'])
        }

        buildTypes {
            release {
                minifyEnabled=false
                proguardFiles.add(file('proguard-android.txt'))
            }
        }

        productFlavors {
            APP_ABIS.each { abi ->
                create(getFlavorName(abi)) {
                    ndk.with {
                        abiFilters.add(abi)
                        getPrebuiltLibPaths(abi).each { path ->
                            ldFlags.add("-L" + path)
                        }
                    }
                }
            }
        }

        defaultConfig {
            applicationId='com.allivault.cloudsafe.playground'
            minSdkVersion.apiLevel = 17
            targetSdkVersion.apiLevel = 23
            versionCode = 1
            versionName = "1.0"
        }

        sources {
            main {
                jni {
                    dependencies {
                        library "libALLIVaultCoreP" linkage "static"
                        library "libgit2cpp" linkage "static"
                        library "libALLIVaultCommon" linkage "static"
                        library "libgit2" linkage "static"
                        library "libosssdkcpp" linkage "static"
                        library "libtinyxml" linkage "static"
                        library "libcpprest" linkage "static"
                        library "libssh2" linkage "static"
                        library "libssl" linkage "static"
                        library "libcrypto" linkage "static"
                        library "libsqlite3" linkage "static"
                        library "libmysqlcppconn"  linkage "static"
                        library "libmysqlclient"  linkage "static"
                        library "libboost_system" linkage "static"
                        library "libboost_filesystem" linkage "static"
                    }
                }
            }
        }
    }

    repositories {
        def prebuiltHome = "${projectDir}/prebuilt"
        def boostIncDir = getBoostIncDir()

        libs(PrebuiltLibraries) {
            //TARGET_ARCH_ABI
            // armeabi, armeabi-v7a, arm64-v8a, x86, x86_64, mips, mips64
            libcrypto {
                headers.srcDir "${prebuiltHome}/armeabi-v7a/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${prebuiltHome}/${targetPlatform.getName()}/lib/libcrypto.a")
                }
            }

            libssl {
                headers.srcDir "${prebuiltHome}/armeabi-v7a/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${prebuiltHome}/${targetPlatform.getName()}/lib/libssl.a")
                }
            }

            libssh2 {
                headers.srcDir "${prebuiltHome}/armeabi-v7a/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${prebuiltHome}/${targetPlatform.getName()}/lib/libssh2.a")
                }
            }

            libgit2 {
                headers.srcDir "${prebuiltHome}/armeabi-v7a/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${prebuiltHome}/${targetPlatform.getName()}/lib/libgit2.a")
                }
            }
            libALLIVaultCoreP {
                headers.srcDir "${prebuiltHome}/armeabi-v7a/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${prebuiltHome}/${targetPlatform.getName()}/lib/libALLIVaultCoreP.a")
                }
            }

            libboost_system {
                //headers.srcDir "${prebuiltHome}/armeabi/include"
                //headers.srcDir "/data/local/boost_1_58_0/stage-linux-x86-64/include"
                headers.srcDir "${boostIncDir}"
//                binaries.withType(SharedLibraryBinary) {
//                    sharedLibraryFile = file("${prebuiltHome}/${targetPlatform.getName()}/lib/libboost_system.so")
//                }
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${prebuiltHome}/${targetPlatform.getName()}/lib/libboost_system.a")
                }
            }

            libboost_filesystem {
                //headers.srcDir "${prebuiltHome}/armeabi/include"
                //headers.srcDir "/data/local/boost_1_58_0/stage-linux-x86-64/include"
                headers.srcDir "${boostIncDir}"
//                binaries.withType(SharedLibraryBinary) {
//                    sharedLibraryFile = file("${prebuiltHome}/${targetPlatform.getName()}/lib/libboost_filesystem.so")
//                }
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${prebuiltHome}/${targetPlatform.getName()}/lib/libboost_filesystem.a")
                }
            }
            libsqlite3 {
                headers.srcDir "${prebuiltHome}/armeabi-v7a/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${prebuiltHome}/${targetPlatform.getName()}/lib/libsee-sqlite3.a")
                }
            }

            libgit2cpp {
                headers.srcDir "${prebuiltHome}/armeabi-v7a/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${prebuiltHome}/${targetPlatform.getName()}/lib/libgit2cpp.a")
                }
            }

            libALLIVaultCommon {
                //headers.srcDir "${prebuiltHome}/armeabi-v7a/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${prebuiltHome}/${targetPlatform.getName()}/lib/libALLIVaultCommon.a")
                }
            }

            libmysqlcppconn {
                headers.srcDir "${prebuiltHome}/armeabi-v7a/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${prebuiltHome}/${targetPlatform.getName()}/lib/libmysqlcppconn-static.a")
                }
            }

            libmysqlclient {
                headers.srcDir "${prebuiltHome}/armeabi-v7a/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${prebuiltHome}/${targetPlatform.getName()}/lib/libmysqlclient.a")
                }
            }
            libcpprest {
                headers.srcDir "${prebuiltHome}/armeabi-v7a/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${prebuiltHome}/${targetPlatform.getName()}/lib/libcpprest.a")
                }
            }

            libosssdkcpp {
                headers.srcDir "${prebuiltHome}/armeabi-v7a/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${prebuiltHome}/${targetPlatform.getName()}/lib/libosssdkcpp.a")
                }
            }

            libtinyxml {
                headers.srcDir "${prebuiltHome}/armeabi-v7a/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${prebuiltHome}/${targetPlatform.getName()}/lib/libtinyxml.a")
                }
            }
        }
    }
}

tasks.all {
    task ->
        if (task.name.startsWith('link')) {
            task.dependsOn copyNativeLibs, stripNativeLibs
        }
}

task copyNativeLibs {
    ["debug", "release"].each { buildType ->
        APP_ABIS.each { abi ->
            def libs = [:]
            BOOST_SHARED_LIBS.each { name ->
                libs[name] = "${getBoostLibDir(abi)}/lib${name}.so"
            }
            libs.crystax = getLibCrystax(abi)

            libs.each { name, file ->
                dependsOn tasks.create(name: "copy-native-library-${name}-${abi}-${buildType}", type: Copy) {
                    from file
                    into getTargetLibDir(abi, buildType)
                }
            }
        }
    }
}

task stripNativeLibs(dependsOn: copyNativeLibs) {
    ["debug", "release"].each { buildType ->
        APP_ABIS.each { abi ->
            def libs = []
            libs.addAll(BOOST_SHARED_LIBS)
            libs += "crystax"

            libs.each { name ->
                dependsOn tasks.create(name: "strip-native-library-${name}-${abi}-${buildType}", type: Exec) {
                    commandLine getStripExecutable(abi), "--strip-unneeded", "${getTargetLibDir(abi, buildType)}/lib${name}.so"
                }
            }

        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:support-v4:23.0.0'
    compile 'com.android.support:appcompat-v7:23.0.0'
}

def getNdkDir() {
    if (System.env.ANDROID_NDK_ROOT != null)
        return System.env.ANDROID_NDK_ROOT

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkdir = properties.getProperty('ndk.dir', null)
    if (ndkdir == null)
        throw new GradleException("""\
                NDK location not found.
                Define location with ndk.dir in the local.properties file
                or with an ANDROID_NDK_ROOT environment variable.""")

    return ndkdir
}

def getCrystaxNdkDir() {
    def ndkDir = getNdkDir()
    if (!(new File(ndkDir, "sources/crystax").exists()))
        throw new GradleException("""\
            '${ndkDir}' is not a CrystaX NDK.
            Edit ndk.dir in local.properties or set ANDROID_NDK_ROOT
            environment variable pointing to CrystaX NDK""")

    return ndkDir
}

def getFlavorName(abi) {
    switch (abi) {
        case "armeabi":
            return "arm";
        case "armeabi-v7a":
            return "arm7"
        case "arm64-v8a":
            return "arm64"
        default:
            return abi.replaceAll('-', '_')
    }
}

def getToolchainName(abi) {
    switch (abi) {
        case ~/^armeabi.*/:
            return "arm-linux-androideabi"
        case ~/^arm64.*/:
            return "aarch64-linux-android"
        case "mips":
            return "mipsel-linux-android"
        case "mips64":
            return "mips64el-linux-android"
        case ["x86", "x86_64"]:
            return abi
        default:
            throw new GradleException("Unsupported ABI: '${abi}'")
    }
}

def getToolchainPrefix(abi) {
    switch (abi) {
        case ~/^armeabi.*/:
            return "arm-linux-androideabi"
        case ~/^arm64.*/:
            return "aarch64-linux-android"
        case "mips":
            return "mipsel-linux-android"
        case "mips64":
            return "mips64el-linux-android"
        case "x86":
            return "i686-linux-android"
        case "x86_64":
            return "x86_64-linux-android"
        default:
            throw new GradleException("Unsupported ABI: '${abi}'")
    }
}

def getHostOS() {
    if (OperatingSystem.current().isLinux())
        return "linux"
    if (OperatingSystem.current().isMacOsX())
        return "darwin"
    if (OperatingSystem.current().isWindows())
        return "windows"
    throw new GradleException("Unsupported host OS")
}

def getHostArch() {
    def arch = System.getProperty("os.arch")
    switch (arch) {
        case ["x86_64", "amd64"]:
            return "x86_64"
        case ~/^i[3456]86/:
        case "x86":
            return "x86"
        default:
            throw new GradleException("Can't detect host's CPU architecture: '${arch}'")
    }
}

def getHostTag() {
    def tag = getHostOS()
    def arch = getHostArch()
    if (tag != "windows" || arch != "x86")
        tag += "-${arch}"
    return tag
}

def getStripExecutable(abi) {
    def ndk = getCrystaxNdkDir()
    def toolchainName = getToolchainName(abi)
    def toolchainPrefix = getToolchainPrefix(abi)
    def hostTag = getHostTag()
    def strip = "${ndk}/toolchains/${toolchainName}-5/prebuilt/${hostTag}/bin/${toolchainPrefix}-strip"
    if (OperatingSystem.current().isWindows())
        strip = strip.replaceAll('/', '\\\\') + '.exe'
    return strip
}

def getPrebuiltLibPaths(abi) {
    def paths = []
    paths += getBoostLibDir(abi)
    paths += getLibCrystaxDir(abi)
    return paths
}

def getTargetLibDir(abi, buildType) {
    return "${buildDir}/intermediates/binaries/${buildType}/${getFlavorName(abi)}/lib/${abi}"
}

def getLibCrystaxDir(abi) {
    return "${getCrystaxNdkDir()}/sources/crystax/libs/${abi}"
}

def getLibCrystax(abi) {
    return "${getLibCrystaxDir(abi)}/libcrystax.so"
}

def getBoostDir() {
    return "${getCrystaxNdkDir()}/sources/boost/1.59.0"
}

def getBoostIncDir() {
    return "${getBoostDir()}/include"
}

def getBoostLibDir(abi) {
    return "${getBoostDir()}/libs/${abi}/gnu-5"
}

class SampleMigrationRuleSource extends RuleSource {
    static final def projectDir = new File("app").absolutePath
    static final def prebuiltHome = "${projectDir}/prebuilt"

    @Mutate
    void injectX86DebugLinkerFlags(
            @Path('tasks.linkAllivault-apiX86DebugX86SharedLibrary')
                    Task linkTask) {
        injectLinkerFlags(linkTask, 'x86', 'debug')
    }

    @Mutate
    void injectX86ReleaseLinkerFlags(
            @Path('tasks.linkAllivault-apiX86ReleaseX86SharedLibrary')
                    Task linkTask) {
        injectLinkerFlags(linkTask, 'x86', 'release')
    }

    @Mutate
    void injectArmabiV7aDebugLinkerFlags(
            @Path('tasks.linkAllivault-apiArmeabi-v7aDebugArm7SharedLibrary')
                    Task linkTask) {
        injectLinkerFlags(linkTask, 'armeabi-v7a', 'debug')
    }

    @Mutate
    void injectArmabiV7aReleaseLinkerFlags(
            @Path('tasks.linkAllivault-apiArmeabi-v7aReleaseArm7SharedLibrary')
                    Task linkTask) {
        injectLinkerFlags(linkTask, 'armeabi-v7a', 'release')
    }


    private void injectLinkerFlags(linkTask, arch, buildType) {
        def myStaticLibHome = "${prebuiltHome}"

        // Before we actually perform the link task let us add our
        // solutions for challenge three and four
        linkTask.doFirst {
            // We are pretty clueless on this one but it is needed
            if (arch.equals('arm64-v8a')) {
                properties["linkerArgs"].add("-fuse-ld=gold")
            }

            properties["linkerArgs"].addAll([
                    "-l${myStaticLibHome}/${arch}/lib/libALLIVaultCoreP.a".toString(),
                    "-l${myStaticLibHome}/${arch}/lib/libgit2cpp.a".toString(),
                    "-l${myStaticLibHome}/${arch}/lib/libgit2.a".toString(),
                    "-l${myStaticLibHome}/${arch}/lib/libosssdkcpp.a".toString(),
                    "-l${myStaticLibHome}/${arch}/lib/libtinyxml.a".toString(),
                    "-l${myStaticLibHome}/${arch}/lib/libcpprest.a".toString(),
                    "-l${myStaticLibHome}/${arch}/lib/libssh2.a".toString(),
                    "-l${myStaticLibHome}/${arch}/lib/libssl.a".toString(),
                    "-l${myStaticLibHome}/${arch}/lib/libcrypto.a".toString(),
                    "-l${myStaticLibHome}/${arch}/lib/libsee-sqlite3.a".toString(),
                    "-l${myStaticLibHome}/${arch}/lib/libmysqlcppconn-static.a".toString(),
                    "-l${myStaticLibHome}/${arch}/lib/libmysqlclient.a".toString(),
//                    "-l${myStaticLibHome}/${arch}/lib/libboost_system.so".toString(),
//                    "-l${myStaticLibHome}/${arch}/lib/libboost_filesystem.so".toString(),
                    "-l${myStaticLibHome}/${arch}/lib/libboost_system.a".toString(),
                    "-l${myStaticLibHome}/${arch}/lib/libboost_filesystem.a".toString(),
            ])
        }
    }
}

apply plugin: SampleMigrationRuleSource